{"version":3,"sources":["components/buttons/StartButton.js","components/buttons/RestartButton.js","components/buttons/SkipButton.js","components/Counter.js","components/StateDisplay.js","App.js","serviceWorker.js","index.js"],"names":["StartButton","react_default","a","createElement","id","className","onClick","this","props","click","Component","RestartButton","SkipButton","_this","theState","Counter","count","StateDisplay","getUSStateList","theStatesNew","shuffle","listOfStates","forEach","value","push","name","done","skipped","theStateList","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","checkTheState","the_state","state","current","markStateColor","markStateDone","startClickHandler","window","gameStarted","setCurrent","setState","started","restartClickHandler","redrawMap","getInitialState","skipClickHandler","skipTheState","map","renderMap","score","complete","newCurrent","length","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","err","return","i","_this2","newScore","_this3","newSkipped","state_id","updateChoropleth","defineProperty","fillKey","states","stateIds","fillkey","startButton","restartButton","counterDisplay","stateDisplay","skipButton","buttons_StartButton","buttons_RestartButton","components_Counter","components_StateDisplay","getCurrentStateName","buttons_SkipButton","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRAceA,mLARX,OACEC,EAAAC,EAAAC,cAAA,UAAQC,GAAG,QAAQC,UAAU,eAAeC,QAASC,KAAKC,MAAMC,OAAhE,iBAJoBC,aCWXC,mLARX,OACEV,EAAAC,EAAAC,cAAA,UAAQC,GAAG,UAAUC,UAAU,iBAAiBC,QAASC,KAAKC,MAAMC,OAApE,mBAJsBC,aCcbE,mLAZH,IAAAC,EAAAN,KACR,OACEN,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQC,GAAG,OAAOC,UAAU,cAAcC,QAAS,WACjDO,EAAKL,MAAMC,MAAMI,EAAKL,MAAMM,YAD9B,gBALmBJ,aCcVK,mLAXX,OACEd,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACfJ,EAAAC,EAAAC,cAAA,SAAII,KAAKC,MAAMQ,MAAf,gBANgBN,aCWPO,mLARX,OACEhB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACfJ,EAAAC,EAAAC,cAAA,UAAMI,KAAKC,MAAMM,kBALIJ,qBCUrBQ,EAAiB,WACnB,IAAMC,EAAe,GASrB,OARAC,kBAAQC,GAAcC,QAAQ,SAAAC,GAC1BJ,EAAaK,KAAK,CACdC,KAAMF,EAAME,KACZrB,GAAImB,EAAMnB,GACVsB,MAAM,EACNC,SAAS,MAGVR,GAGPS,EAAeV,IA6JJW,cAxJb,SAAAA,IAAc,IAAAhB,EAAA,OAAAiB,OAAAC,EAAA,EAAAD,CAAAvB,KAAAsB,IACZhB,EAAAiB,OAAAE,EAAA,EAAAF,CAAAvB,KAAAuB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA3B,QA0DF4B,cAAgB,SAACC,GACXA,EAAUX,OAASG,EAAaf,EAAKwB,MAAMC,SAASb,OACtDZ,EAAK0B,eAAeH,EAAUhC,IAC9BS,EAAK2B,kBA9DK3B,EA8Fd4B,kBAAoB,WAClBC,OAAOC,aAAc,EACrB9B,EAAK+B,aACL/B,EAAKgC,SAAS,CAACC,SAAS,KAjGZjC,EAoGdkC,oBAAsB,WACpBL,OAAOC,aAAc,EACrB9B,EAAKmC,YACLpB,EAAeV,IACfL,EAAKgC,SACHhC,EAAKoC,kBACL,WAAOpC,EAAK+B,gBA1GF/B,EA8GdqC,iBAAmB,SAACd,GAClBvB,EAAKsC,gBA7GLtC,EAAKwB,MAAQxB,EAAKoC,kBAClBpC,EAAKuC,IAAMV,OAAOW,YAElBX,OAAOU,IAAMvC,EAAKuC,IAClBV,OAAOP,cAAgBtB,EAAKsB,cANhBtB,iFAUZ,MAAO,CACLiC,SAAS,EACTQ,MAAO,EACP3B,QAAS,EACTW,QAAS,EACTiB,UAAU,wCAKZ,IAAIhD,KAAK8B,MAAMkB,SAAf,CAGA,IAAIC,EAAa,KAGjB,GAAIjD,KAAK8B,MAAMiB,MAAQ/C,KAAK8B,MAAMV,UAAYC,EAAa6B,OAAO,KAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAChE,QAAAC,EAAAC,EAAkBnC,EAAlBoC,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAxC,MAAAgC,GAAA,EAA+B,CAAAI,EAAAvC,MACvBI,SAAU,EAChBpB,KAAKsC,SAAS,CAAClB,QAAS,KAHsC,MAAAwC,GAAAR,GAAA,EAAAC,EAAAO,EAAA,YAAAT,GAAA,MAAAK,EAAAK,QAAAL,EAAAK,SAAA,WAAAT,EAAA,MAAAC,IAQlE,IAAK,IAAIS,EAAI,EAAGA,EAAIzC,EAAa6B,SACtB7B,EAAayC,GAAG3C,MAASE,EAAayC,GAAG1C,UAC5C6B,EAAaa,GAEI,OAAfb,GAJ+Ba,KAQzC9D,KAAKsC,SAAS,CACZP,QAASkB,6CAIG,IAAAc,EAAA/D,KACdqB,EAAarB,KAAK8B,MAAMC,SAASZ,MAAO,EACxC,IAAI6C,EAAWhE,KAAK8B,MAAMiB,MAAQ,EAC9BiB,IAAa3C,EAAa6B,QAC5BlD,KAAKsC,SAAS,CAACU,UAAU,IAE3BhD,KAAKsC,SACH,CAACS,MAAOiB,GACR,WAAOD,EAAK1B,sDAWD,IAAA4B,EAAAjE,KACbqB,EAAarB,KAAK8B,MAAMC,SAASX,SAAU,EAC3C,IAAI8C,EAAalE,KAAK8B,MAAMV,QAAU,EACtCpB,KAAKsC,SACH,CAAClB,QAAS8C,GACV,WAAOD,EAAK5B,sDAID8B,GACbnE,KAAK6C,IAAIuB,iBAAT7C,OAAA8C,EAAA,EAAA9C,CAAA,GACI4C,EAAW,CAACG,QAAS,wDAKzB,OAAOjD,EAAarB,KAAK8B,MAAMC,SAASb,yCAMxC,IAFA,IAAIqD,EAAS5D,IACT6D,EAAW,GACNV,EAAI,EAAGA,EAAIS,EAAOrB,OAAQY,IACjCU,EAASD,EAAOT,GAAGjE,IAAM,CAAC4E,QAAS,QAErCzE,KAAK6C,IAAIuB,iBAAiBI,oCAwB1B,IAAIE,EACAC,EACAC,EACAC,EACAC,EACA9B,EAmBJ,OAjB2B,IAAvBhD,KAAK8B,MAAMS,QACbmC,EAAchF,EAAAC,EAAAC,cAACmF,EAAD,CAAa7E,MAAOF,KAAKkC,qBAGvCyC,EAAgBjF,EAAAC,EAAAC,cAACoF,EAAD,CAAe9E,MAAOF,KAAKwC,sBACtCxC,KAAK8B,MAAMkB,WACd4B,EAAiBlF,EAAAC,EAAAC,cAACqF,EAAD,CAASxE,MAAOT,KAAK8B,MAAMiB,QAC5C8B,EAAenF,EAAAC,EAAAC,cAACsF,EAAD,CAAc3E,SAAUP,KAAKmF,wBAC5CL,EAAapF,EAAAC,EAAAC,cAACwF,EAAD,CAAY7E,SAAUP,KAAK8B,MAAMC,QACvB7B,MAAOF,KAAK2C,qBAInC3C,KAAK8B,MAAMkB,WACbA,EAAWtD,EAAAC,EAAAC,cAAA,yBAIXF,EAAAC,EAAAC,cAAA,WACG8E,EACAC,EACAC,EACAC,EACAC,EACA9B,UApJS7C,aCjBEkF,QACW,cAA7BlD,OAAOmD,SAASC,UAEe,UAA7BpD,OAAOmD,SAASC,UAEhBpD,OAAOmD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhG,EAAAC,EAAAC,cAAC+F,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3706a776.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass StartButton extends Component {\n\n  render () {\n    return (\n      <button id=\"start\" className=\"start-button\" onClick={this.props.click}>\n          Start!\n      </button>\n    )\n  }\n};\n\nexport default StartButton;\n","import React, { Component } from 'react';\n\n\nclass RestartButton extends Component {\n\n  render () {\n    return (\n      <button id=\"restart\" className=\"restart-button\" onClick={this.props.click}>\n          Restart!\n      </button>\n    )\n  }\n};\n\nexport default RestartButton;\n","import React, { Component } from 'react';\n\n\nclass SkipButton extends Component {\n\n  render () {\n    return (\n      <div>\n      <button id=\"skip\" className=\"skip-button\" onClick={() => {\n        this.props.click(this.props.theState)}}>\n          Skip\n      </button>\n      </div>\n    )\n  }\n};\n\nexport default SkipButton;\n","import React, { Component } from 'react';\n\n\nclass Counter extends Component {\n\n  render () {\n    return (\n      <div>\n      <div className=\"counter\">\n      <p>{this.props.count}/50</p>\n      </div>\n      </div>\n    )\n  }\n};\n\n\nexport default Counter;\n","import React, { Component } from 'react';\n\n\nclass StateDisplay extends Component {\n\n  render () {\n    return (\n      <div className=\"state-name\">\n      <h1>{ this.props.theState }</h1>\n      </div>\n    )\n  }\n};\n\nexport default StateDisplay;\n","import React, { Component } from 'react';\nimport './App.css';\nimport listOfStates from './states.json';\n\nimport StartButton from './components/buttons/StartButton';\nimport RestartButton from './components/buttons/RestartButton';\nimport SkipButton from './components/buttons/SkipButton';\nimport Counter from './components/Counter.js';\nimport StateDisplay from './components/StateDisplay.js';\n\nimport { shuffle } from 'lodash';\n\n\nconst getUSStateList = () => {\n    const theStatesNew = [];\n    shuffle(listOfStates).forEach(value => {\n        theStatesNew.push({\n            name: value.name,\n            id: value.id,\n            done: false,\n            skipped: false\n        });\n    });\n    return theStatesNew;\n};\n\nlet theStateList = getUSStateList();\n\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = this.getInitialState();\n    this.map = window.renderMap();\n\n    window.map = this.map;\n    window.checkTheState = this.checkTheState;\n  }\n\n  getInitialState() {\n    return {\n      started: false,\n      score: 0,\n      skipped: 0,\n      current: 0,\n      complete: false\n    };\n  }\n\n  setCurrent() {\n    if (this.state.complete){\n      return;\n    }\n    let newCurrent = null;\n\n    // if skipped all states (back to start)\n    if (this.state.score + this.state.skipped === theStateList.length){\n      for (let state of theStateList){\n        state.skipped = false;\n        this.setState({skipped: 0});\n      }\n    }\n\n    // get index of first state that hasn't been done or skipped\n    for (let i = 0; i < theStateList.length; i++){\n          if (!theStateList[i].done && !theStateList[i].skipped){\n            newCurrent = i;\n          }\n          if (newCurrent !== null){\n            break;\n          }\n    }\n    this.setState({\n      current: newCurrent\n    });\n  }\n\n  markStateDone() {\n    theStateList[this.state.current].done = true;\n    let newScore = this.state.score + 1;\n    if (newScore === theStateList.length){\n      this.setState({complete: true});\n    }\n    this.setState(\n      {score: newScore},\n      () => {this.setCurrent();}\n    );\n  }\n\n  checkTheState = (the_state) => {\n    if (the_state.name === theStateList[this.state.current].name){\n      this.markStateColor(the_state.id);\n      this.markStateDone();\n    }\n  }\n\n  skipTheState() {\n    theStateList[this.state.current].skipped = true;\n    let newSkipped = this.state.skipped + 1\n    this.setState(\n      {skipped: newSkipped},\n      () => {this.setCurrent()}\n    );\n  }\n\n  markStateColor(state_id) {\n    this.map.updateChoropleth(\n      {[state_id]: {fillKey: 'done'}\n    });\n  }\n\n  getCurrentStateName() {\n    return theStateList[this.state.current].name;\n  }\n\n  redrawMap() {\n    let states = getUSStateList();\n    let stateIds = {};\n    for (let i = 0; i < states.length; i++){\n      stateIds[states[i].id] = {fillkey: 'done'}\n    }\n    this.map.updateChoropleth(stateIds);\n  }\n\n  startClickHandler = () => {\n    window.gameStarted = true;\n    this.setCurrent();\n    this.setState({started: true});\n  }\n\n  restartClickHandler = () => {\n    window.gameStarted = false;\n    this.redrawMap()\n    theStateList = getUSStateList();\n    this.setState(\n      this.getInitialState(),\n      () => {this.setCurrent()}\n    );\n  }\n\n  skipClickHandler = (the_state) => {\n    this.skipTheState()\n  }\n\n  render() {\n    let startButton;\n    let restartButton;\n    let counterDisplay;\n    let stateDisplay;\n    let skipButton;\n    let complete;\n\n    if (this.state.started === false) {\n      startButton = <StartButton click={this.startClickHandler}/>;\n    }\n    else {\n      restartButton = <RestartButton click={this.restartClickHandler}/>;\n      if (!this.state.complete){\n        counterDisplay = <Counter count={this.state.score}/>;\n        stateDisplay = <StateDisplay theState={this.getCurrentStateName()}/>;\n        skipButton = <SkipButton theState={this.state.current}\n                               click={this.skipClickHandler}/>\n        }\n    }\n\n    if (this.state.complete) {\n      complete = <h1>Well done!</h1>\n    }\n\n    return (\n      <div>\n        {startButton}\n        {restartButton}\n        {counterDisplay}\n        {stateDisplay}\n        {skipButton}\n        {complete}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('game'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}