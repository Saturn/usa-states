{"version":3,"sources":["components/buttons/StartButton.js","components/buttons/RestartButton.js","components/Counter.js","components/StateDisplay.js","App.js","serviceWorker.js","index.js"],"names":["StartButton","react_default","a","createElement","id","className","onClick","this","props","click","Component","RestartButton","Counter","count","StateDisplay","theState","getListOfStates","shuffle","listOfStates","theStateList","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","checkTheState","the_state","correctStates","has","state","complete","score","name","current","markStateCorrect","add","markStateIncorrect","length","setState","startClickHandler","window","gameStarted","started","restartClickHandler","redrawMap","getInitialState","skipClickHandler","skipTheState","map","renderMap","Set","state_id","markStateColor","color_key","updateChoropleth","defineProperty","fillKey","states","stateIds","i","fillkey","startButton","restartButton","counterDisplay","stateDisplay","buttons_StartButton","buttons_RestartButton","components_Counter","components_StateDisplay","getCurrentStateName","Fragment","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.49e0ade8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass StartButton extends Component {\r\n\r\n  render () {\r\n    return (\r\n      <button id=\"start\" className=\"start-button\" onClick={this.props.click}>\r\n          Start!\r\n      </button>\r\n    )\r\n  }\r\n};\r\n\r\nexport default StartButton;\r\n","import React, { Component } from 'react';\r\n\r\n\r\nclass RestartButton extends Component {\r\n\r\n  render () {\r\n    return (\r\n      <button id=\"restart\" className=\"restart-button\" onClick={this.props.click}>\r\n          Restart!\r\n      </button>\r\n    )\r\n  }\r\n};\r\n\r\nexport default RestartButton;\r\n","import React, { Component } from 'react';\r\n\r\n\r\nclass Counter extends Component {\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n      <div className=\"counter\">\r\n      <p>Score: {this.props.count}</p>\r\n      </div>\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\n\r\nexport default Counter;\r\n","import React, { Component } from 'react';\r\n\r\n\r\nclass StateDisplay extends Component {\r\n\r\n  render () {\r\n    return (\r\n      <div className=\"state-name\">\r\n      <h1>{ this.props.theState }</h1>\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\nexport default StateDisplay;\r\n","import React, {\r\n  Component\r\n} from 'react';\r\nimport './App.css';\r\nimport listOfStates from './states.json';\r\n\r\nimport StartButton from './components/buttons/StartButton';\r\nimport RestartButton from './components/buttons/RestartButton';\r\nimport Counter from './components/Counter.js';\r\nimport StateDisplay from './components/StateDisplay.js';\r\n\r\nimport {\r\n  shuffle\r\n} from 'lodash';\r\n\r\n\r\nconst getListOfStates = () => {\r\n  return shuffle(listOfStates);\r\n}\r\n\r\nlet theStateList = getListOfStates();\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = this.getInitialState();\r\n    this.map = window.renderMap();\r\n    this.correctStates = new Set();\r\n\r\n    window.map = this.map;\r\n    window.checkTheState = this.checkTheState;\r\n  }\r\n\r\n  getInitialState() {\r\n    return {\r\n      started: false,\r\n      score: 0,\r\n      current: 0,\r\n      complete: false\r\n    };\r\n  }\r\n\r\n  checkTheState = (the_state) => {\r\n    if (this.correctStates.has(the_state.id) || this.state.complete === true){\r\n      return;\r\n    }\r\n    let score = 0;\r\n    if (the_state.name === theStateList[this.state.current].name) {\r\n      this.markStateCorrect(the_state.id);\r\n      this.correctStates.add(the_state.id);\r\n      score = 1;\r\n    } else {\r\n      this.markStateIncorrect(the_state.id);\r\n    }\r\n    let newCurrent = this.state.current + 1;\r\n    if (newCurrent === theStateList.length) {\r\n      this.setState({\r\n        complete: true\r\n      });\r\n    } else {\r\n      this.setState({\r\n        score: this.state.score + score,\r\n        current: this.state.current + 1\r\n      });\r\n    }\r\n  }\r\n\r\n  markStateCorrect(state_id) {\r\n    this.markStateColor(state_id, 'correct');\r\n  }\r\n\r\n  markStateIncorrect(state_id) {\r\n    this.markStateColor(state_id, 'incorrect');\r\n  }\r\n\r\n  markStateColor(state_id, color_key) {\r\n    this.map.updateChoropleth({\r\n      [state_id]: {\r\n        fillKey: color_key\r\n      }\r\n    });\r\n  }\r\n\r\n  getCurrentStateName() {\r\n    return theStateList[this.state.current].name;\r\n  }\r\n\r\n  redrawMap() {\r\n    let states = getListOfStates();\r\n    let stateIds = {};\r\n    for (let i = 0; i < states.length; i++) {\r\n      stateIds[states[i].id] = {\r\n        fillkey: 'defaultFill'\r\n      }\r\n    }\r\n    this.map.updateChoropleth(stateIds);\r\n  }\r\n\r\n  startClickHandler = () => {\r\n    window.gameStarted = true;\r\n    this.setState({\r\n      started: true\r\n    });\r\n  }\r\n\r\n  restartClickHandler = () => {\r\n    window.gameStarted = false;\r\n    this.redrawMap()\r\n    theStateList = getListOfStates();\r\n    this.setState(this.getInitialState());\r\n  }\r\n\r\n  skipClickHandler = (the_state) => {\r\n    this.skipTheState()\r\n  }\r\n\r\n  render() {\r\n    let startButton;\r\n    let restartButton;\r\n    let counterDisplay;\r\n    let stateDisplay;\r\n    let complete;\r\n\r\n    if (this.state.started === false) {\r\n      startButton = < StartButton click = {\r\n        this.startClickHandler\r\n      }\r\n      />;\r\n    } else {\r\n      restartButton = < RestartButton click = {\r\n        this.restartClickHandler\r\n      }\r\n      />;\r\n      if (!this.state.complete) {\r\n        counterDisplay = < Counter count = {\r\n          this.state.score\r\n        }\r\n        />;\r\n        stateDisplay = < StateDisplay theState = {\r\n          this.getCurrentStateName()\r\n        }\r\n        />;\r\n      }\r\n    }\r\n\r\n    if (this.state.complete) {\r\n      complete = ( <\r\n        >\r\n        <\r\n        h1 > Game Over < /h1> <\r\n        h2 > You scored {\r\n          this.state.score\r\n        } < /h2> <\r\n        />\r\n      )\r\n    }\r\n\r\n    return ( <\r\n      div > {\r\n        startButton\r\n      } {\r\n        restartButton\r\n      } {\r\n        counterDisplay\r\n      } {\r\n        stateDisplay\r\n      } {\r\n        complete\r\n      } <\r\n      /div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('game'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}