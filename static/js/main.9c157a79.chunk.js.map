{"version":3,"sources":["components/buttons/StartButton.js","components/buttons/RestartButton.js","components/Counter.js","components/StateDisplay.js","App.js","serviceWorker.js","index.js"],"names":["StartButton","react_default","a","createElement","id","className","onClick","this","props","click","Component","RestartButton","Counter","count","StateDisplay","theState","getListOfStates","shuffle","listOfStates","theStateList","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","checkTheState","the_state","correctStates","has","state","complete","score","name","current","markStateCorrect","add","markStateIncorrect","length","setState","startClickHandler","window","gameStarted","started","restartClickHandler","redrawMap","getInitialState","skipClickHandler","skipTheState","map","renderMap","Set","state_id","markStateColor","color_key","updateChoropleth","defineProperty","fillKey","states","stateIds","i","fillkey","startButton","restartButton","counterDisplay","stateDisplay","buttons_StartButton","buttons_RestartButton","components_Counter","components_StateDisplay","getCurrentStateName","Fragment","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9c157a79.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass StartButton extends Component {\n  render() {\n    return (\n      <button id=\"start\" className=\"start-button\" onClick={this.props.click}>\n        Start!\n      </button>\n    );\n  }\n}\n\nexport default StartButton;\n","import React, { Component } from \"react\";\n\nclass RestartButton extends Component {\n  render() {\n    return (\n      <button\n        id=\"restart\"\n        className=\"restart-button\"\n        onClick={this.props.click}\n      >\n        Restart!\n      </button>\n    );\n  }\n}\n\nexport default RestartButton;\n","import React, { Component } from \"react\";\n\nclass Counter extends Component {\n  render() {\n    return (\n      <div>\n        <div className=\"counter\">\n          <p>Score: {this.props.count}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Counter;\n","import React, { Component } from \"react\";\n\nclass StateDisplay extends Component {\n  render() {\n    return (\n      <div className=\"state-name\">\n        <h1>{this.props.theState}</h1>\n      </div>\n    );\n  }\n}\n\nexport default StateDisplay;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport listOfStates from \"./states.json\";\n\nimport StartButton from \"./components/buttons/StartButton\";\nimport RestartButton from \"./components/buttons/RestartButton\";\nimport Counter from \"./components/Counter.js\";\nimport StateDisplay from \"./components/StateDisplay.js\";\n\nimport { shuffle } from \"lodash\";\n\nconst getListOfStates = () => {\n  return shuffle(listOfStates);\n};\n\nlet theStateList = getListOfStates();\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = this.getInitialState();\n    this.map = window.renderMap();\n    this.correctStates = new Set();\n\n    window.map = this.map;\n    window.checkTheState = this.checkTheState;\n  }\n\n  getInitialState() {\n    return {\n      started: false,\n      score: 0,\n      current: 0,\n      complete: false,\n    };\n  }\n\n  checkTheState = (the_state) => {\n    if (this.correctStates.has(the_state.id) || this.state.complete === true) {\n      return;\n    }\n    let score = 0;\n    if (the_state.name === theStateList[this.state.current].name) {\n      this.markStateCorrect(the_state.id);\n      this.correctStates.add(the_state.id);\n      score = 1;\n    } else {\n      this.markStateIncorrect(the_state.id);\n    }\n    let newCurrent = this.state.current + 1;\n    if (newCurrent === theStateList.length) {\n      this.setState({\n        complete: true,\n      });\n    } else {\n      this.setState({\n        score: this.state.score + score,\n        current: this.state.current + 1,\n      });\n    }\n  };\n\n  markStateCorrect(state_id) {\n    this.markStateColor(state_id, \"correct\");\n  }\n\n  markStateIncorrect(state_id) {\n    this.markStateColor(state_id, \"incorrect\");\n  }\n\n  markStateColor(state_id, color_key) {\n    this.map.updateChoropleth({\n      [state_id]: {\n        fillKey: color_key,\n      },\n    });\n  }\n\n  getCurrentStateName() {\n    return theStateList[this.state.current].name;\n  }\n\n  redrawMap() {\n    let states = getListOfStates();\n    let stateIds = {};\n    for (let i = 0; i < states.length; i++) {\n      stateIds[states[i].id] = {\n        fillkey: \"defaultFill\",\n      };\n    }\n    this.map.updateChoropleth(stateIds);\n  }\n\n  startClickHandler = () => {\n    window.gameStarted = true;\n    this.setState({\n      started: true,\n    });\n  };\n\n  restartClickHandler = () => {\n    window.gameStarted = false;\n    this.redrawMap();\n    theStateList = getListOfStates();\n    this.setState(this.getInitialState());\n  };\n\n  skipClickHandler = (the_state) => {\n    this.skipTheState();\n  };\n\n  render() {\n    let startButton;\n    let restartButton;\n    let counterDisplay;\n    let stateDisplay;\n    let complete;\n\n    if (this.state.started === false) {\n      startButton = <StartButton click={this.startClickHandler} />;\n    } else {\n      restartButton = <RestartButton click={this.restartClickHandler} />;\n      if (!this.state.complete) {\n        counterDisplay = <Counter count={this.state.score} />;\n        stateDisplay = <StateDisplay theState={this.getCurrentStateName()} />;\n      }\n    }\n\n    if (this.state.complete) {\n      complete = (\n        <>\n          <h1> Game Over </h1> <h2> You scored {this.state.score} </h2>{\" \"}\n        </>\n      );\n    }\n\n    return (\n      <div>\n        {\" \"}\n        {startButton} {restartButton} {counterDisplay} {stateDisplay} {complete}{\" \"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"game\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}